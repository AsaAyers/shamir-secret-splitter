{"version":3,"sources":["components/part-page/styles.module.css","components/assemble/BEEPPURE.mp3","components/nav/styles.module.css","constants.ts","components/part-input/index.tsx","hooks.ts","components/part-page/index.tsx","components/print/index.tsx","components/edit/index.tsx","components/assemble/index.tsx","components/nav/index.tsx","components/app/index.tsx","serviceWorker.ts","index.tsx","pgp-phrase.ts","wrapper.ts","components/print/styles.module.css","components/assemble/styles.module.css"],"names":["module","exports","Routes","MAX_PARTS","MIN_PARTS","initialState","hex","text","error","reducer","state","action","type","payload","hexToWords","join","wordsToHex","tmp","split","pop","word","PartInput","part","onChange","index","id","React","useMemo","Math","random","toString","substr","name","useHtmlId","useReducer","result","dispatch","useEffect","TextField","e","target","value","newHex","multiline","helperText","label","PartPage","children","history","useHistory","href","window","location","protocol","host","createHref","pathname","Assemble","Paper","className","styles","page","numParts","useSecretFromLocation","useLocation","Number","quorum","PrintSecret","secret","parts","useShamir","push","Edit","Fragment","Card","noPrint","CardContent","CardActions","to","Button","variant","onClick","print","map","search","URLSearchParams","set","String","destination","key","qr","renderAs","size","useStyles","makeStyles","title","fontSize","content","display","flexDirection","emptySecret","NewSecret","classes","defaultState","useState","setState","handleChange","update","Object","assign","partsOptions","quorumOptions","i","onSubmit","preventDefault","Print","Typography","color","gutterBottom","select","SelectProps","native","data-testid","n","cardContent","notEmpty","item","scanIndex","undefined","unreachable","_n","trim","meta","scan","queryToPart","query","get","isNaN","usePartParameters","callback","AssembleSecret","scanning","setScanning","setSecret","beep","Audio","mp3","addEventListener","event","console","log","play","duration","initialValue","localStorage","getItem","JSON","parse","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","useLocalStorage","storage","setStorage","useCallback","replace","handleChangeHex","current","handleSubmit","values","filter","done","every","p","length","a","async","foo","navigator","vibrate","go","Array","fill","MenuItem","partInputs","classnames","success","delay","onError","err","onScan","data","URL","searchParams","setTimeout","Nav","tabValue","nav","Tabs","Tab","home","margin","Home","component","packageJson","repository","rel","Boolean","hostname","match","ReactDOM","render","basename","Container","maxWidth","CssBaseline","path","document","getElementById","reverseWordslist","buffer","Buffer","from","toLowerCase","words","wordlist","input","even","odd","toUpperCase","secretBytes","TextEncoder","encode","uintParts","shamir","randomBytes","entries","uint","reduce","obj","Uint8Array","utf8Decoder","TextDecoder","bytes","decode"],"mappings":"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","file":"static/js/main.79f58f6c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"styles_page__2ydav\"};","module.exports = __webpack_public_path__ + \"static/media/BEEPPURE.cc279eb8.mp3\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"styles_nav__2cd2r\",\"printTab\":\"styles_printTab__1Y1BP\"};","\nexport const MAX_PARTS = 10\nexport const MIN_PARTS = 2\n\nexport const DEFAULT_PARTS = 4\nexport const DEFAULT_QUORUM = 3\n\n\nexport enum Routes {\n  Edit = '/',\n  Print = '/print',\n  Assemble = '/assemble',\n}\n","import React from 'react'\nimport { TextField } from '@material-ui/core';\nimport { Part, MinimumPart } from '../../types'\nimport { hexToWords, wordsToHex } from '../../pgp-phrase'\nimport { useHtmlId } from '../../hooks';\n\ntype Props = {\n  part?: MinimumPart | Part,\n  onChange?: (index: number, hex: string) => void,\n  index: number,\n}\n\ntype State = {\n  hex: string,\n  text: string,\n  error: null | string,\n}\n\nconst initialState: State = {\n  hex: '',\n  text: '',\n  error: null,\n}\n\n\ntype Action =\n  | { type: 'text', payload: string }\n  | { type: 'hex', payload: string }\nfunction reducer(state: State, action: Action): State {\n  if (action.type === 'hex') {\n    const hex = action.payload\n    let text = hexToWords(hex).join(' ')\n\n    return {\n      hex,\n      text,\n      error: null,\n    }\n  }\n\n  if (action.type === 'text') {\n    const text = action.payload\n    let hex = wordsToHex(text)\n    if (typeof hex !== 'string') {\n      const tmp = text.split(/\\s+/g)\n      tmp.pop()\n      hex = wordsToHex(tmp.join(' '))\n    }\n\n    if (typeof hex == 'string') {\n      return { hex, text, error: null, }\n    }\n\n    return {\n      ...state,\n      text,\n      error: `${hex.word} not recognized`\n    }\n  }\n  return state;\n}\n\nexport default function PartInput({ part, onChange, index }: Props) {\n  const id = useHtmlId()\n  const hex = part?.hex ?? \"\"\n  const [state, dispatch] = React.useReducer(reducer, initialState, (state) => {\n    const result = hexToWords(hex).join(' ')\n    if (typeof result === 'string') {\n      return {\n        ...state,\n        text: result,\n        hex,\n      }\n    }\n    return state\n  })\n  React.useEffect(() => {\n    if (hex !== state.hex) {\n      dispatch({ type: 'hex', payload: hex })\n\n    }\n  })\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!onChange) { return }\n\n    const text = e.target.value\n    dispatch({ type: 'text', payload: text })\n    const newHex = wordsToHex(text)\n\n    if (typeof newHex === 'string' && newHex !== hex) {\n      onChange(index, newHex)\n    }\n  }\n\n  return (\n    <TextField\n      onChange={handleChange}\n      multiline\n      id={id(`part-${index}`)}\n      error={state.error != null}\n      helperText={state.error}\n      value={state.text}\n      name=\"label\"\n      label={`Part ${index}`} />\n  )\n\n}\n","import React from 'react'\nimport { useLocation } from 'react-router-dom'\n\nexport function useHtmlId() {\n  const id = React.useMemo(() => Math.random().toString(16).substr(2), [])\n\n  return (name: string) => name + '-' + id\n}\n\n\nexport function useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\n\n\n// Based on the hook at https://usehooks.com/useLocalStorage/\nexport function useLocalStorage<T>(key: string, initialValue: T): [T, React.Dispatch<React.SetStateAction<T>>] {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = React.useState<T>(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.error(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue: React.Dispatch<React.SetStateAction<T>> = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.error(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","import React from 'react'\nimport { Paper } from '@material-ui/core'\nimport { Part } from '../../types'\nimport PartInput from '../part-input'\nimport styles from './styles.module.css'\nimport { useHistory } from 'react-router-dom'\nimport { Routes } from '../../constants'\n\n\ntype Props = {\n  part: Part\n  children: React.ReactNode\n}\n\nexport default function PartPage({ part, children }: Props) {\n  const history = useHistory()\n\n  const href = window.location.protocol + '//' + window.location.host\n    + history.createHref({ pathname: Routes.Assemble })\n  return (\n    <Paper className={styles.page}>\n      <h1>{part.label}</h1>\n      <h2>{part.index} of {part.numParts}</h2>\n\n      {children}\n\n      <strong>{href}</strong>\n      <p>\n        If the QR code doesn't scan, you can go to the URL above and type in the\n        following into the textbox for <strong>Part {part.index}</strong>:\n      </p>\n      <PartInput part={part} index={part.index}\n      />\n    </Paper>\n  )\n}\n","import React from 'react'\nimport {\n  useLocation, useHistory, Link\n} from \"react-router-dom\";\nimport QRCode from 'qrcode.react'\nimport { Button, Card, CardContent, CardActions } from '@material-ui/core';\nimport { Routes } from '../../constants'\nimport PartPage from '../part-page'\nimport { Secret } from '../../types'\nimport { split } from '../../wrapper'\nimport styles from './styles.module.css'\n\nexport function useSecretFromLocation(): Secret | null {\n  const location = useLocation()\n\n  return React.useMemo(() => {\n    if (!location.state) {\n      return null\n    }\n    const numParts = Number(location.state.numParts || 0)\n    const quorum = Number(location.state.quorum || 0)\n\n    if (!numParts || !quorum || quorum >= numParts) {\n      return null\n    }\n\n    return {\n      label: location.state.label || \"\",\n      text: location.state.text || \"\",\n      numParts,\n      quorum,\n    }\n  }, [location.state])\n}\n\n\nexport function useShamir(secret: Secret | null) {\n  return React.useMemo(() => {\n    if (secret == null) {\n      return\n    }\n    return split(secret)\n  }, [secret])\n}\n\nexport default function PrintSecret() {\n  const history = useHistory()\n  const secret = useSecretFromLocation()\n  const parts = useShamir(secret)\n\n\n  React.useEffect(() => {\n    if (\n      parts == null\n      || secret == null\n      || !secret.label\n      || !secret.text\n      || !secret.numParts\n      || !secret.quorum\n    ) {\n      history.push(Routes.Edit, secret)\n    }\n  }, [history, parts, secret])\n\n  if (parts == null || secret == null) return null\n\n  return (\n    <React.Fragment>\n      <Card className={styles.noPrint}>\n        <CardContent>\n          <p>\n            Thew following pages contain your secret. Print them and distribute\n            them to different locations. From the Assemble Secret page, if you\n            scan any {secret.quorum} of these codes, it will display your\n            secret.\n          </p>\n        </CardContent>\n        <CardActions>\n          <Link to={{ pathname: Routes.Edit, state: secret }}>\n            <Button variant=\"outlined\">\n              Edit\n            </Button>\n          </Link>\n\n          <Button onClick={() => window.print()} variant=\"outlined\">\n            Print\n          </Button>\n        </CardActions>\n      </Card>\n      {parts.map((part) => {\n\n        const search = new URLSearchParams()\n        search.set('index', String(part.index))\n        search.set('hex', part.hex)\n        search.set('numParts', String(part.numParts))\n        search.set('quorum', String(part.quorum))\n        search.set('label', String(part.label))\n\n        const destination: any = {\n          pathname: Routes.Assemble,\n          search: search.toString(),\n        }\n\n        const href = window.location.protocol + '//' + window.location.host\n          + history.createHref(destination)\n\n\n        return (\n          <PartPage part={part} key={part.index} >\n            <Link to={destination}>\n              <QRCode\n                className={styles.qr}\n                renderAs=\"svg\"\n                size={512}\n                value={href}\n              />\n            </Link>\n          </PartPage>\n        )\n      }\n      )}\n\n    </React.Fragment>\n  )\n}\n","import React from 'react'\nimport { Card, CardContent, CardActions, TextField, Button, makeStyles, Typography } from '@material-ui/core';\nimport { useHistory } from \"react-router-dom\";\nimport { Routes, MAX_PARTS, MIN_PARTS, DEFAULT_PARTS, DEFAULT_QUORUM } from '../../constants'\nimport { useSecretFromLocation } from '../print'\nimport { Secret } from '../../types'\n\nconst useStyles = makeStyles({\n  title: {\n    fontSize: 14,\n  },\n  content: {\n    display: 'flex',\n    flexDirection: 'column',\n  }\n})\n\nconst emptySecret: Secret = {\n  label: \"\",\n  text: \"\",\n  numParts: DEFAULT_PARTS,\n  quorum: DEFAULT_QUORUM,\n}\n\n\nexport default function NewSecret() {\n  const classes = useStyles()\n  const history = useHistory()\n  const defaultState = useSecretFromLocation() || emptySecret\n\n  const [state, setState] = React.useState<Secret>(defaultState)\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const update = { [e.target.name]: e.target.value }\n    setState((state) => Object.assign({}, state, update))\n  }\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    history.push(Routes.Print, state)\n\n  }\n\n  const partsOptions: number[] = []\n  const quorumOptions: number[] = []\n  for (let i = 1; i <= MAX_PARTS; i++) {\n    if (i >= MIN_PARTS) {\n      partsOptions.push(i)\n    }\n    if (i < state.numParts) {\n      quorumOptions.push(i)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit} >\n      <Card>\n        <CardContent className={classes.content}>\n          <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n            Create Secret\n          </Typography>\n\n          <TextField\n            onChange={handleChange}\n            value={state.label}\n            id=\"label\"\n            name=\"label\"\n            label=\"Label\" />\n\n          <TextField\n            multiline={true}\n            label=\"Secret Text\"\n            id=\"secret-text\"\n            onChange={handleChange}\n            value={state.text}\n            name=\"text\" />\n\n\n          <TextField\n            name=\"quorum\"\n            select\n            SelectProps={{\n              native: true\n            }}\n            id=\"quorum\"\n            data-testid=\"quorum\"\n            label=\"quorum\"\n            value={state.quorum}\n            onChange={handleChange}\n          >\n            {quorumOptions.map((n) => (\n              <option key={n} value={n}>{n}</option>\n            ))}\n          </TextField>\n\n          <TextField\n            name=\"numParts\"\n            select\n            label=\"Parts\"\n            id=\"parts\"\n            SelectProps={{\n              native: true\n            }}\n            data-testid=\"parts\"\n            value={state.numParts}\n            onChange={handleChange}\n          >\n            {partsOptions.map((n) => (\n              <option key={n} value={n}>{n}</option>\n            ))}\n          </TextField>\n\n          <p>\n            In order to reassemble your secret, you will need {state.quorum} out\n            of {state.numParts} pieces. Your label will be printed at the top of\n            each page.\n          </p>\n        </CardContent>\n        <CardActions>\n          <Button type=\"submit\" color=\"primary\" variant=\"outlined\">\n            Done\n          </Button>\n        </CardActions>\n      </Card>\n    </form >\n  )\n}\n","import React from 'react';\nimport QrReader from 'react-qr-reader'\nimport { useHistory } from 'react-router-dom'\nimport classnames from 'classnames'\nimport { Card, CardContent, CardActions, TextField, MenuItem, Button, makeStyles } from '@material-ui/core';\nimport { Routes, MAX_PARTS, MIN_PARTS, DEFAULT_PARTS } from '../../constants'\nimport { useQuery, useLocalStorage } from '../../hooks'\nimport { Part, MinimumPart } from '../../types'\nimport { join } from '../../wrapper'\nimport PartInput from '../part-input'\nimport styles from './styles.module.css'\n// https://www.partnersinrhyme.com/soundfx/PUBLIC-DOMAIN-SOUNDS/beep_sounds/beep_beep-pure_wav.shtml\nimport mp3 from './BEEPPURE.mp3'\n\nconst useStyles = makeStyles({\n  cardContent: {\n    display: 'flex',\n    flexDirection: 'column',\n  }\n})\n\nfunction notEmpty<T>(item: T | null | undefined): item is T {\n  return item != null\n}\n\ntype State = {\n  numParts: number,\n  parts: Record<string, Part | MinimumPart>\n  scanIndex: undefined | number\n}\n\ntype ActionSetNumParts = {\n  type: 'setNumParts',\n  payload: number,\n}\n\ntype ActionsSetPart = {\n  type: 'setPart',\n  payload: MinimumPart | Part,\n  meta?: { scan: number }\n}\n\ntype ActionClearScan = {\n  type: 'clearScan',\n  payload: State['scanIndex'],\n}\n\ntype ActionReset = {\n  type: 'reset',\n}\n\ntype Action =\n  | ActionSetNumParts\n  | ActionsSetPart\n  | ActionClearScan\n  | ActionReset\n\n\nconst initialState: State = {\n  numParts: DEFAULT_PARTS,\n  parts: {},\n  scanIndex: undefined,\n}\n\nconst unreachable = (_n: never) => { }\nfunction reducer(state: State, action: Action): State {\n\n  switch (action.type) {\n    case \"reset\":\n      return initialState\n    case \"setNumParts\":\n      return {\n        ...state,\n        numParts: action.payload,\n        parts: {},\n      }\n    case \"setPart\": {\n      let part = action.payload\n      const numParts = 'numParts' in part ? part.numParts : state.numParts\n      let parts = state.parts\n      if (numParts !== state.numParts) {\n        parts = {}\n      }\n\n      if (part.hex.trim() === '') {\n        // Clone parts so I don't mutate the original object\n        parts = { ...parts }\n        delete parts[part.index]\n        return {\n          ...state,\n          parts,\n          numParts,\n        }\n      }\n\n      let scanIndex = (action.meta?.scan || state.scanIndex)\n      return {\n        ...state,\n        parts: {\n          ...parts,\n          [part.index]: part\n        },\n        numParts,\n        scanIndex,\n      }\n    }\n    case 'clearScan': {\n      if (state.scanIndex === action.payload) {\n        return {\n          ...state,\n          scanIndex: undefined\n        }\n      }\n      return state\n    }\n    default:\n      unreachable(action)\n  }\n\n  return state\n}\n\n\nfunction queryToPart(query: URLSearchParams): Part | null {\n  const index = Number(query.get('index'))\n  const hex = query.get('hex')\n  const numParts = Number(query.get('numParts'))\n  const label = query.get('label')\n  const quorum = Number(query.get('quorum'))\n  if (\n    !isNaN(index)\n    && index > 0\n    && hex\n    && !isNaN(numParts)\n    && numParts > 0\n    && !isNaN(quorum)\n    && quorum > 0\n    && label != null\n  ) {\n    const part: Part = {\n      index,\n      hex,\n      label,\n      numParts,\n      quorum\n    }\n    return part\n  }\n  return null\n}\n\nfunction usePartParameters(callback: (p: Part) => void) {\n  const query = useQuery()\n  const part = queryToPart(query)\n  React.useEffect(() => {\n    if (part != null) {\n      callback(part)\n    }\n  }, [callback, part])\n}\n\nexport default function AssembleSecret() {\n  const classes = useStyles()\n  const history = useHistory()\n  const [scanning, setScanning] = React.useState(false)\n  const [secret, setSecret] = React.useState<null | string>(null)\n  var beep = React.useMemo(() => {\n    const beep = new Audio(mp3)\n    beep.addEventListener(\"canplaythrough\", event => {\n      console.log('canplaythrough', event)\n      /* the audio is now playable; play it if permissions allow */\n      beep.play();\n    });\n    beep.addEventListener('loadeddata', () => {\n      let duration = beep.duration;\n      console.log('duratino', duration)\n\n    })\n\n    // @ts-ignore\n    window.beep = beep\n    return beep\n  }, [])\n\n  // I couldn't figure out the types to extract this into its own hook\n  /* useStorageReducer(key, reducer, initialState) */\n  const [storage, setStorage] = useLocalStorage('state', initialState)\n  const [state, dispatch] = React.useReducer(reducer, storage)\n  React.useEffect(() => {\n    if (storage !== state) {\n      setStorage(state)\n    } else {\n    }\n  }, [setStorage, state, storage])\n\n\n  const paramCB = React.useCallback((part) => {\n    dispatch({\n      type: 'setPart',\n      payload: part,\n    })\n    history.replace(Routes.Assemble)\n  }, [history])\n  usePartParameters(paramCB)\n\n  const { numParts, parts } = state\n  const handleChangeNumParts = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    dispatch({\n      type: 'setNumParts',\n      payload: Number(e.target.value)\n    })\n  }\n\n  const handleChangeHex = (index: number, hex: string) => {\n    const current = parts[index] ?? { index, hex: '' }\n    dispatch({\n      type: 'setPart',\n      payload: {\n        ...current,\n        hex\n      }\n    })\n  }\n\n  const handleSubmit = React.useCallback((e?: React.FormEvent<HTMLFormElement>) => {\n    if (e) {\n      e.preventDefault()\n    }\n\n    try {\n      const secret = join(\n        Object.values(parts)\n      )\n      setSecret(secret)\n      dispatch({ type: 'reset' })\n    } catch (e) {\n      console.error(e)\n    }\n  }, [parts])\n\n  React.useEffect(() => {\n    const parts = Object.values(state.parts)\n      .filter(notEmpty)\n\n\n    const done = parts.every(p => (\n      'label' in p\n      && 'label' in parts[0]\n      && p.label === parts[0].label\n      && p.numParts === parts[0].numParts\n      && p.quorum === parts[0].quorum\n\n    ))\n\n    if (\n      parts[0]\n      && 'quorum' in parts[0]\n      && parts.length === parts[0].quorum\n      && done\n    ) {\n      handleSubmit()\n    }\n\n  }, [handleSubmit, state.parts])\n\n  const handleScanError = (err: any) => {\n    console.error(err)\n  }\n  const handleScan = (data: string | null) => {\n    if (data) {\n      try {\n        const url = new URL(data)\n        const part = queryToPart(url.searchParams)\n\n        if (part != null && part.hex !== parts[part.index]?.hex) {\n\n          const scan = Math.random()\n          dispatch({\n            type: 'setPart',\n            payload: part,\n            meta: { scan }\n          })\n          setTimeout(() => {\n            dispatch({ type: 'clearScan', payload: scan })\n          }, 1000)\n        }\n      } catch (e) {\n      }\n    }\n  }\n\n  React.useEffect(() => {\n    console.log('idx', state.scanIndex)\n    if (state.scanIndex != null) {\n      const go = async () => {\n        try {\n          console.log('beep', beep)\n          const foo = await beep.play()\n          console.log({ foo })\n        } catch (e) {\n          console.error('err', e)\n        }\n        try {\n          console.log(\n            'vibrate',\n            window.navigator.vibrate(200)\n          )\n        } catch (e) {\n          console.error(e)\n        }\n      }\n      go()\n\n\n    }\n  }, [beep, state.scanIndex])\n\n  const partsOptions = new Array(MAX_PARTS - MIN_PARTS)\n    .fill(0)\n    .map((_n, index) => (\n      <MenuItem key={index} value={index + MIN_PARTS}>{index + MIN_PARTS}</MenuItem>\n    ))\n\n  const partInputs: JSX.Element[] = []\n  for (let i = 1; i <= numParts; i++) {\n    partInputs.push(\n      <PartInput key={`${i}/${numParts}`} index={i} part={parts[i]} onChange={handleChangeHex} />\n    )\n  }\n  if (secret) {\n\n    return (\n      <Card>\n        <CardContent>\n          {secret}\n        </CardContent>\n      </Card>\n    )\n\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Card>\n        <CardContent className={classnames(classes.cardContent, {\n          [styles.success]: state.scanIndex != null,\n        })}>\n          {scanning ? (\n            <React.Fragment>\n              <QrReader\n                className={styles.qr}\n                delay={500}\n                onError={handleScanError}\n                onScan={handleScan}\n              />\n              {JSON.stringify(\n                state.scanIndex != null,\n              )}\n              <Button variant=\"outlined\" onClick={() => setScanning(false)}>Stop Scanning</Button>\n            </React.Fragment>\n          ) : (\n              <Button variant=\"outlined\" onClick={() => setScanning(true)}>Scan QR Codes</Button>\n            )}\n\n          <br />\n\n          <TextField\n            name=\"numParts\"\n            select\n            label=\"Parts\"\n            value={numParts}\n            onChange={handleChangeNumParts}\n          >\n            {partsOptions}\n          </TextField>\n\n          {partInputs}\n\n        </CardContent>\n        <CardActions>\n          <Button type=\"submit\" color=\"primary\" variant=\"outlined\">\n            Done\n          </Button>\n        </CardActions>\n      </Card>\n    </form>\n  )\n}\n","import React from 'react'\nimport { Tabs, Tab } from '@material-ui/core'\nimport { Routes } from '../../constants'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport styles from './styles.module.css'\n\nexport default function Nav() {\n  const location = useLocation()\n  const history = useHistory()\n\n  const handleChange = (event: any, pathname: string) => {\n    history.push(pathname)\n  }\n  let tabValue = Routes.Edit\n  switch (location.pathname) {\n    case Routes.Assemble:\n      tabValue = Routes.Assemble\n      break;\n    case Routes.Edit:\n    case Routes.Print:\n    default:\n      tabValue = Routes.Edit\n  }\n\n\n  return (\n    <nav className={styles.nav}>\n      <Tabs value={tabValue} onChange={handleChange} >\n        <Tab value={Routes.Edit} label=\"New Secret\" />\n        <Tab value={Routes.Assemble} label=\"Assemble Secret\" />\n      </Tabs>\n    </nav >\n  )\n}\n","import React from 'react';\nimport {\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport { Card, CardContent, Typography, CssBaseline, Container, makeStyles } from '@material-ui/core';\nimport packageJson from '../../../package.json'\nimport { Routes } from '../../constants'\nimport Edit from '../edit'\nimport Print from '../print'\nimport AssembleSecret from '../assemble'\nimport Nav from '../nav'\n\nexport default function App() {\n  return (\n    <Container maxWidth=\"sm\">\n      <CssBaseline />\n      <Nav />\n      <Switch>\n        <Route path={Routes.Print}>\n          <Print />\n        </Route>\n        <Route path={Routes.Assemble}>\n          <AssembleSecret />\n        </Route>\n        <Route path={Routes.Edit}>\n          <Home />\n          <Edit />\n        </Route>\n      </Switch>\n    </Container>\n  );\n}\n\nconst useStyles = makeStyles({\n  home: {\n    margin: '1em 0'\n  }\n})\n\nfunction Home() {\n  const classes = useStyles()\n\n  return (\n    <Card className={classes.home}>\n      <CardContent>\n        <Typography component=\"h1\">\n          Experimental\n        </Typography>\n\n        <p>\n          This project is still experimental and may continue to change. I\n          cannot guarantee that pages printed today will continue to scan in the\n          future.\n        </p>\n\n        <Typography component=\"h1\">\n          Overview\n        </Typography>\n\n        <p>\n          Say you have an important password to backup in case you ever forget\n          it. Maybe you use a password manager for most passwords, but how do\n          you backup your password for your password manager? You don’t want to\n          just write it down because anyone who finds it will have your\n          password.\n        </p>\n        <p>\n          Using the Shamir Secret Splitter you can split your password into\n          pices and store them in different places. You might decide to split it\n          into 4 pages and any set of 3 can be used to assemble the password.\n        </p>\n        <p>\n          Each page contains a QR code with a link back to this site. No special\n          software is needed, just point your phone's camera at the page and\n          follow the link. From the limited testing I’ve done, it seems like QR\n          code scanners are built into the default camera apps on Android and\n          iOS. When the camera finds a QR code you should get some kind of\n          notification asking if you want to open the link in your browser. If\n          it doesn’t work, you may need to go change a setting to turn on QR\n          code scanning.\n        </p>\n        <p>\n          When you arrive on the \"Assemble Secret\" page it has a Scan QR Codes\n          button that you can use to scan the remaining pages. But what if you\n          can't scan a QR code? Every page also has a series of words that\n          contain the same piece of your secret as the QR code. If you need to,\n          you can simply type those into the \"Assemble Secret\" page.\n        </p>\n        <p>\n          For additional details view the project on <a\n            href={packageJson.repository}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\">\n            GitHub\n          </a>\n\n\n        </p>\n      </CardContent>\n    </Card>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport './serviceWorker';\n\nconst basename = '/shamir-secret-splitter'\n\nReactDOM.render(<Router basename={basename}><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n","import wordlist from 'pgp-word-list/pgp.json'\n\nexport function hexToWords(hex: string): string[] {\n  const buffer = Buffer.from(hex.toLowerCase().replace(/[^0-9a-f]+/g, ''), 'hex')\n\n  const words: string[] = []\n  for (let i = 0; i < buffer.length; i++) {\n    const value = buffer[i]\n    words.push(\n      wordlist[value][i % 2]\n    )\n  }\n\n  return words\n}\n\n\ntype ReverseWordList = [\n  Record<string, number>,\n  Record<string, number>,\n]\n\nlet reverseWordslist: ReverseWordList\n\n\ntype ErrorResult = { type: 'INVALID_WORD', word: string }\nexport function wordsToHex(input: string): string | ErrorResult {\n  if (reverseWordslist == null) {\n    reverseWordslist = [{}, {}]\n    for (let i = 0; i < wordlist.length; i++) {\n      const [even, odd] = wordlist[i]\n\n      reverseWordslist[0][even.toLowerCase()] = i\n      reverseWordslist[1][odd.toLowerCase()] = i\n    }\n  }\n\n  const words = input.trim().toLowerCase().split(/\\s+/g)\n  if (input.trim().length === 0) {\n    return ''\n  }\n\n  const values = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n\n    const tmp = reverseWordslist[i % 2][word]\n    if (tmp == null) {\n      return { type: 'INVALID_WORD', word }\n    }\n    values.push(tmp)\n  }\n\n  return Buffer.from(values).toString('hex').toUpperCase()\n}\n","import * as shamir from 'shamir'\nimport { randomBytes } from 'crypto'\nimport { Secret, Part, MinimumPart } from './types'\n\nexport function split(secret: Secret): Part[] {\n  const utf8Encoder = new TextEncoder();\n  let secretBytes = utf8Encoder.encode(secret.text);\n\n  const uintParts = shamir.split(randomBytes, secret.numParts, secret.quorum, secretBytes);\n\n  return Object.entries(uintParts).map(([key, uint]): Part => {\n    return {\n      label: secret.label,\n      numParts: secret.numParts,\n      quorum: secret.quorum,\n      index: Number(key),\n      hex: Buffer.from(uint).toString('hex')\n    }\n  })\n}\n\nexport function join(parts: MinimumPart[]): Secret['text'] {\n  const uintParts = parts\n    .reduce((obj, p) => {\n      obj[p.index] = Uint8Array.from(Buffer.from(p.hex, 'hex'))\n      return obj\n    }, {} as Record<string, Uint8Array>)\n  const utf8Decoder = new TextDecoder();\n\n  const bytes = shamir.join(uintParts)\n\n  return utf8Decoder.decode(bytes)\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"print\":\"styles_print__X66sV\",\"qr\":\"styles_qr__3rz3I\",\"noPrint\":\"styles_noPrint__2Y233\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"success\":\"styles_success__1X2tx\",\"qr\":\"styles_qr__1UJ4b\"};"],"sourceRoot":""}