{"version":3,"sources":["components/part-page/styles.module.css","components/print/styles.module.css","components/assemble/styles.module.css","constants.ts","hooks.ts","components/part-input/index.tsx","components/part-page/index.tsx","components/print/index.tsx","components/edit/index.tsx","components/assemble/index.tsx","components/nav/index.tsx","serviceWorker.ts","index.tsx","components/app/index.tsx","wrapper.ts","components/nav/styles.module.css"],"names":["module","exports","Routes","MAX_PARTS","MIN_PARTS","useHtmlId","id","React","useMemo","Math","random","toString","substr","name","PartInput","part","onChange","index","hex","htmlFor","e","target","value","PartPage","children","className","styles","page","label","numParts","useSecretFromLocation","location","useLocation","state","Number","quorum","text","PrintSecret","history","useHistory","secret","parts","split","useShamir","useEffect","push","Edit","Fragment","noPrint","JSON","stringify","to","pathname","map","search","URLSearchParams","set","String","console","log","destination","Assemble","href","window","protocol","host","createHref","key","renderAs","size","emptySecret","NewSecret","defaultState","useState","setState","handleChange","update","Object","assign","partsOptions","quorumOptions","i","onSubmit","preventDefault","Print","n","type","unreachable","_n","reducer","action","scanning","payload","initialState","usePartParameters","callback","query","get","isNaN","AssembleSecret","initialValue","item","localStorage","getItem","parse","error","storedValue","setStoredValue","valueToStore","Function","setItem","useLocalStorage","storage","setStorage","useReducer","dispatch","useCallback","replace","handleChangeHex","current","Array","fill","partInputs","join","values","reader","delay","onError","err","onScan","data","indexOf","onClick","Nav","nav","Boolean","hostname","match","ReactDOM","render","basename","path","document","getElementById","secretBytes","TextEncoder","encode","uintParts","shamir","randomBytes","entries","uint","Buffer","from","reduce","obj","p","Uint8Array","utf8Decoder","TextDecoder","bytes","decode"],"mappings":"2HACAA,EAAOC,QAAU,CAAC,KAAO,uB,oBCAzBD,EAAOC,QAAU,CAAC,GAAK,mBAAmB,QAAU,0B,oBCApDD,EAAOC,QAAU,CAAC,OAAS,yB,wLCOfC,E,mDAPCC,EAAY,GACZC,EAAY,G,SAMbF,K,SAAAA,E,eAAAA,E,sBAAAA,M,kDCLL,SAASG,IACd,IAAMC,EAAKC,IAAMC,SAAQ,kBAAMC,KAAKC,SAASC,SAAS,IAAIC,OAAO,KAAI,IAErE,OAAO,SAACC,GAAD,OAAkBA,EAAO,IAAMP,GCIzB,SAASQ,EAAT,GAAsD,IAAD,EAAhCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,MAC5CX,EAAKD,IAELa,EAAG,iBAAGH,QAAH,IAAGA,OAAH,EAAGA,EAAMG,WAAT,QAAgB,GAKzB,OACE,6BACE,2BAAOC,QAASb,EAAG,QAAnB,QACQW,GAER,2BACED,SAVe,SAACI,GACpBJ,EAASC,EAAOG,EAAEC,OAAOC,QAUrBA,MAAOJ,EACPL,KAAK,MACLP,GAAIA,EAAG,U,sBChBA,SAASiB,EAAT,GAA8C,IAA1BR,EAAyB,EAAzBA,KAAMS,EAAmB,EAAnBA,SAGvC,OACE,yBAAKC,UAAWC,IAAOC,MACrB,4BAAKZ,EAAKa,OACV,4BAAKb,EAAKE,MAAV,OAAqBF,EAAKc,UAEzBL,EAED,0FAGA,6BACE,kBAACV,EAAD,CAAWC,KAAMA,EACfC,SAAU,aACVC,MAAOF,EAAKE,U,8BChBf,SAASa,IACd,IAAMC,EAAWC,cAEjB,OAAOzB,IAAMC,SAAQ,WACnB,IAAKuB,EAASE,MACZ,OAAO,KAET,IAAMJ,EAAWK,OAAOH,EAASE,MAAMJ,UAAY,GAC7CM,EAASD,OAAOH,EAASE,MAAME,QAAU,GAE/C,OAAKN,IAAaM,GAAUA,GAAUN,EAC7B,KAGF,CACLD,MAAOG,EAASE,MAAML,OAAS,GAC/BQ,KAAML,EAASE,MAAMG,MAAQ,GAC7BP,WACAM,YAED,CAACJ,EAASE,QAaA,SAASI,IACtB,IAAMC,EAAUC,cACVC,EAASV,IACTW,EAZD,SAAmBD,GACxB,OAAOjC,IAAMC,SAAQ,WACnB,GAAc,MAAVgC,EAGJ,OAAOE,YAAMF,KACZ,CAACA,IAMUG,CAAUH,GAgBxB,OAbAjC,IAAMqC,WAAU,WAEH,MAATH,GACa,MAAVD,GACCA,EAAOZ,OACPY,EAAOJ,MACPI,EAAOX,UACPW,EAAOL,QAEXG,EAAQO,KAAK3C,EAAO4C,KAAMN,KAE3B,CAACF,EAASG,EAAOD,IAEP,MAATC,EAAsB,KAGxB,kBAAC,IAAMM,SAAP,KACE,yBAAKtB,UAAWC,IAAOsB,SACrB,sCAEA,6BAAMC,KAAKC,UAAUV,EAAQ,KAAM,IACnC,kBAAC,IAAD,CAAMW,GAAI,CAAEC,SAAUlD,EAAO4C,KAAMb,MAAOO,IAA1C,SAKDC,EAAMY,KAAI,SAACtC,GAEV,IAAMuC,EAAS,IAAIC,gBACnBD,EAAOE,IAAI,QAASC,OAAO1C,EAAKE,QAChCqC,EAAOE,IAAI,MAAOzC,EAAKG,KACvBoC,EAAOE,IAAI,WAAYC,OAAO1C,EAAKc,WACnCyB,EAAOE,IAAI,SAAUC,OAAO1C,EAAKoB,SACjCmB,EAAOE,IAAI,QAASC,OAAO1C,EAAKa,QAKhC8B,QAAQC,IAAI,SAAUL,EAAO3C,YAE7B,IAAMiD,EAAmB,CACvBR,SAAUlD,EAAO2D,SACjBP,OAAQA,EAAO3C,YAGXmD,EAAOC,OAAOhC,SAASiC,SAAW,KAAOD,OAAOhC,SAASkC,KAC3D3B,EAAQ4B,WAAWN,GAGvB,OACE,kBAACrC,EAAD,CAAUR,KAAMA,EAAMoD,IAAKpD,EAAKE,OAC9B,kBAAC,IAAD,CAAMkC,GAAIS,GACR,kBAAC,IAAD,CACEQ,SAAS,MACTC,KAAM,IACN/C,MAAOwC,UCjGvB,IAAMQ,EAAsB,CAC1B1C,MAAO,GACPQ,KAAM,GACNP,SLP2B,EKQ3BM,OLP4B,GKWf,SAASoC,IAmBtB,IAlBA,IAAMjC,EAAUC,cACVjC,EAAKD,IACLmE,EAAe1C,KAA2BwC,EAHd,EAKR/D,IAAMkE,SAAiBD,GALf,mBAK3BvC,EAL2B,KAKpByC,EALoB,KAO5BC,EAAe,SAACvD,GACpB,IAAMwD,EAAM,eAAMxD,EAAEC,OAAOR,KAAOO,EAAEC,OAAOC,OAC3CoD,GAAS,SAACzC,GAAD,OAAW4C,OAAOC,OAAO,GAAI7C,EAAO2C,OAQzCG,EAAyB,GACzBC,EAA0B,GACvBC,EAAI,EAAGA,GAAK9E,EAAW8E,IAC1BA,GAAK7E,GACP2E,EAAalC,KAAKoC,GAEhBA,GAAKhD,EAAMJ,UACbmD,EAAcnC,KAAKoC,GAIvB,OACE,0BAAMC,SAlBa,SAAC9D,GACpBA,EAAE+D,iBACF7C,EAAQO,KAAK3C,EAAOkF,MAAOnD,KAiBzB,yCAEA,2BAAOd,QAASb,EAAG,UAAnB,SAGA,2BACEU,SAAU2D,EACVrD,MAAOW,EAAML,MACbf,KAAK,QACLP,GAAIA,EAAG,WAET,6BAEA,2BAAOa,QAASb,EAAG,SAAnB,eAGA,8BACEU,SAAU2D,EACVrD,MAAOW,EAAMG,KACbvB,KAAK,OACLP,GAAIA,EAAG,UAET,6BAEA,2BAAOa,QAASb,EAAG,WAAnB,UAGA,4BAAQO,KAAK,SAASP,GAAIA,EAAG,UAAWgB,MAAOW,EAAME,OAAQnB,SAAU2D,GACpEK,EAAc3B,KAAI,SAACgC,GAAD,OACjB,4BAAQlB,IAAKkB,EAAG/D,MAAO+D,GAAIA,OAI/B,6BACA,2BAAOlE,QAASb,EAAG,aAAnB,SAGA,4BAAQO,KAAK,WAAWP,GAAIA,EAAG,YAAagB,MAAOW,EAAMJ,SAAUb,SAAU2D,GAC1EI,EAAa1B,KAAI,SAACgC,GAAD,OAChB,4BAAQlB,IAAKkB,EAAG/D,MAAO+D,GAAIA,OAI/B,6BACA,4BAAQC,KAAK,UAAb,S,gDChDAC,EAAc,SAACC,KACrB,SAASC,EAAQxD,EAAcyD,GAE7B,OAAQA,EAAOJ,MACb,IAAK,YACH,OAAO,eACFrD,EADL,CAEE0D,UAAU,IAEd,IAAK,cACH,OAAO,eACF1D,EADL,CAEEJ,SAAU6D,EAAOE,QACjBnD,MAAO,KAEX,IAAK,UACH,IAAM1B,EAAO2E,EAAOE,QACd/D,EAAW,aAAcd,EAAOA,EAAKc,SAAWI,EAAMJ,SACxDY,EAAQR,EAAMQ,MAKlB,OAJIZ,IAAaI,EAAMJ,WACrBY,EAAQ,IAGH,eACFR,EADL,CAEEQ,MAAM,eACDA,EADA,eAEF1B,EAAKE,MAAQF,IAEhBc,aAGJ,IAAK,YACH,OAAO,eACFI,EADL,CAEEO,OAAQkD,EAAOE,UAEnB,QACEL,EAAYG,GAGhB,OAAOzD,EAGT,IAAM4D,EAAsB,CAC1BF,UAAU,EACVnD,OAAQ,KACRX,SNrF2B,EMsF3BY,MAAO,IAGT,SAASqD,EAAkBC,GACzB,IAAMC,ELnFC,IAAIzC,gBAAgBvB,cAAcsB,QKqFnCrC,EAAQiB,OAAO8D,EAAMC,IAAI,UACzB/E,EAAM8E,EAAMC,IAAI,OAChBpE,EAAWK,OAAO8D,EAAMC,IAAI,aAC5BrE,EAAQoE,EAAMC,IAAI,SAClB9D,EAASD,OAAO8D,EAAMC,IAAI,WAChC1F,IAAMqC,WAAU,WAYd,GAVAc,QAAQC,IAAI,CAEV1C,QACAC,MACAW,WACAD,QACAO,YAKC+D,MAAMjF,IACJA,EAAQ,GACRC,IACCgF,MAAMrE,IACPA,EAAW,IACVqE,MAAM/D,IACPA,EAAS,GACA,MAATP,EACH,CACA,IAAMb,EAAa,CACjBE,QACAC,MACAU,QACAC,WACAM,UAEFuB,QAAQC,IAAI,aAAc5C,GAC1BgF,EAAShF,MAEV,CAACgF,EAAU7E,EAAKD,EAAOW,EAAOC,EAAUM,IAG9B,SAASgE,IACtB,IAAM7F,EAAKD,IACLiC,EAAUC,cAFuB,ELvHlC,SAA4B4B,EAAaiC,GAA+D,MAGvE7F,IAAMkE,UAAY,WACtD,IAEE,IAAM4B,EAAOtC,OAAOuC,aAAaC,QAAQpC,GAEzC,OAAOkC,EAAOpD,KAAKuD,MAAMH,GAAQD,EACjC,MAAOK,GAGP,OADA/C,QAAQC,IAAI8C,GACLL,MAZkG,mBAGtGM,EAHsG,KAGzFC,EAHyF,KAiC7G,MAAO,CAACD,EAfkD,SAACpF,GACzD,IAEE,IAAMsF,EACJtF,aAAiBuF,SAAWvF,EAAMoF,GAAepF,EAEnDqF,EAAeC,GAEf7C,OAAOuC,aAAaQ,QAAQ3C,EAAKlB,KAAKC,UAAU0D,IAChD,MAAOH,GAEP/C,QAAQC,IAAI8C,MKgGcM,CAAgB,QAASlB,GANhB,mBAMhCmB,EANgC,KAMvBC,EANuB,OAOb1G,IAAM2G,WAAWzB,EAASuB,GAPb,mBAOhC/E,EAPgC,KAOzBkF,EAPyB,KAQvC5G,IAAMqC,WAAU,WACVoE,IAAY/E,GACdgF,EAAWhF,KAGZ,CAACgF,EAAYhF,EAAO+E,IAUvBlB,EAPgBvF,IAAM6G,aAAY,SAACrG,GACjCoG,EAAS,CACP7B,KAAM,UACNM,QAAS7E,IAEXuB,EAAQ+E,QAAQnH,EAAO2D,YACtB,CAACvB,KA2DJ,IAjFuC,IAyB/BE,EAAsCP,EAAtCO,OAAQX,EAA8BI,EAA9BJ,SAAU8D,EAAoB1D,EAApB0D,SAAUlD,EAAUR,EAAVQ,MAQ9B6E,EAAkB,SAACrG,EAAeC,GAAiB,IAAD,EAChDqG,EAAO,UAAG9E,EAAMxB,UAAT,QAAmB,CAAEA,QAAOC,IAAK,IAC9CiG,EAAS,CACP7B,KAAM,UACNM,QAAQ,eACH2B,EADE,CAELrG,WAmCA6D,EAAe,IAAIyC,MAAMrH,EAAYC,GACxCqH,KAAK,GACLpE,KAAI,SAACmC,EAAIvE,GAAL,OACH,4BAAQkD,IAAKlD,EAAOK,MAAOL,EAAQb,GAAYa,EAAQb,MAGrDsH,EAA4B,GACzBzC,EAAI,EAAGA,GAAKpD,EAAUoD,IAC7ByC,EAAW7E,KACT,kBAAC/B,EAAD,CAAWqD,IAAKc,EAAGhE,MAAOgE,EAAGlE,KAAM0B,EAAMwC,GAAIjE,SAAUsG,KAI3D,OACE,0BAAMpC,SA5Ca,SAAC9D,GACpBA,EAAE+D,iBAEF,IACE,IAAM3C,EAASmF,YACb9C,OAAO+C,OAAOnF,IAEhB0E,EAAS,CACP7B,KAAM,YACNM,QAASpD,IAEX,MAAOpB,GACPsC,QAAQ+C,MAAMrF,MAiCd,8CAECuE,EACC,kBAAC,IAAD,CACElE,UAAWC,IAAOmG,OAClBC,MAAO,IACPC,QAnCgB,SAACC,GACvBtE,QAAQ+C,MAAMuB,IAmCRC,OAjCW,SAACC,GAElB,GADAxE,QAAQC,IAAI,OAAQuE,GAChBA,EAAM,CACR,IAAMpE,EAAOC,OAAOhC,SAASiC,SAAW,KAAOD,OAAOhC,SAASkC,KAC3D3B,EAAQ4B,WAAW,CAAEd,SAAU,MACR,IAAvB8E,EAAKC,QAAQrE,IACfxB,EAAQ+E,QAAQa,EAAKb,QAAQvD,EAAM,SA+BjC,4BAAQsE,QAAS,kBAAMjB,EAAS,CAAE7B,KAAM,gBAAxC,iBAGJ,6BACA,2BAAOnE,QAASb,EAAG,aAAnB,SAGA,4BAAQO,KAAK,WAAWP,GAAIA,EAAG,YAAagB,MAAOO,EAAUb,SAjFpC,SAACI,GAC5B+F,EAAS,CACP7B,KAAM,cACNM,QAAS1D,OAAOd,EAAEC,OAAOC,WA+EtByD,GAGF2C,EAED,4BAAQpC,KAAK,UAAb,QAIC9C,GACC,wCACWA,I,qBCxPJ,SAAS6F,IAEtB,OACE,yBAAK5G,UAAWC,IAAO4G,KACrB,4BACE,4BAAI,kBAAC,IAAD,CAAMnF,GAAIjD,EAAO4C,MAAjB,eACJ,4BAAI,kBAAC,IAAD,CAAMK,GAAIjD,EAAO2D,UAAjB,sBARZH,QAAQC,IAAI,MAAOjC,KCOC6G,QACW,cAA7BxE,OAAOhC,SAASyG,UAEe,UAA7BzE,OAAOhC,SAASyG,UAEhBzE,OAAOhC,SAASyG,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,IAAD,CAAQC,SAFP,2BAE2B,mBCE7B,WACb,OACE,kBAAC,IAAM7F,SAAP,KACE,kBAACsF,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOQ,KAAM3I,EAAOkF,OAClB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOyD,KAAM3I,EAAO2D,UAClB,kBAACsC,EAAD,OAEF,kBAAC,IAAD,CAAO0C,KAAM3I,EAAO4C,MAClB,kBAAC,EAAD,WDdkC,OAAkBgG,SAASC,eAAe,U,8IEL/E,SAASrG,EAAMF,GACpB,IACIwG,GADgB,IAAIC,aACMC,OAAO1G,EAAOJ,MAEtC+G,EAAYC,QAAaC,cAAa7G,EAAOX,SAAUW,EAAOL,OAAQ6G,GAE5E,OAAOnE,OAAOyE,QAAQH,GAAW9F,KAAI,YAAwB,IAAD,mBAArBc,EAAqB,KAAhBoF,EAAgB,KAC1D,MAAO,CACL3H,MAAOY,EAAOZ,MACdC,SAAUW,EAAOX,SACjBM,OAAQK,EAAOL,OACflB,MAAOiB,OAAOiC,GACdjD,IAAKsI,EAAOC,KAAKF,GAAM5I,SAAS,WAK/B,SAASgH,EAAKlF,GACnB,IAAM0G,EAAY1G,EACfiH,QAAO,SAACC,EAAKC,GAEZ,OADAD,EAAIC,EAAE3I,OAAS4I,WAAWJ,KAAKD,EAAOC,KAAKG,EAAE1I,IAAK,QAC3CyI,IACN,IACCG,EAAc,IAAIC,YAElBC,EAAQZ,OAAYD,GAE1B,OAAOW,EAAYG,OAAOD,M,2CC9B5BhK,EAAOC,QAAU,CAAC,IAAM,uB","file":"static/js/main.dbfadb3d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"styles_page__2ydav\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"qr\":\"styles_qr__3rz3I\",\"noPrint\":\"styles_noPrint__2Y233\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"reader\":\"styles_reader__3noBR\"};","\nexport const MAX_PARTS = 10\nexport const MIN_PARTS = 2\n\nexport const DEFAULT_PARTS = 4\nexport const DEFAULT_QUORUM = 3\n\n\nexport enum Routes {\n  Edit = '/',\n  Print = '/print',\n  Assemble = '/assemble',\n}\n","import React from 'react'\nimport { useLocation } from 'react-router-dom'\n\nexport function useHtmlId() {\n  const id = React.useMemo(() => Math.random().toString(16).substr(2), [])\n\n  return (name: string) => name + '-' + id\n}\n\n\nexport function useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\n\n\n// Based on the hook at https://usehooks.com/useLocalStorage/\nexport function useLocalStorage<T>(key: string, initialValue: T): [T, React.Dispatch<React.SetStateAction<T>>] {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = React.useState<T>(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue: React.Dispatch<React.SetStateAction<T>> = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","import React from 'react'\nimport { useHtmlId } from '../../hooks'\nimport { Part, MinimumPart } from '../../types'\n\ntype Props = {\n  part?: MinimumPart | Part,\n  onChange: (index: number, hex: string) => void,\n  index: number,\n}\n\nexport default function PartInput({ part, onChange, index }: Props) {\n  const id = useHtmlId()\n\n  const hex = part?.hex ?? \"\"\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(index, e.target.value)\n  }\n\n  return (\n    <div>\n      <label htmlFor={id('hex')}>\n        Part {index}\n      </label>\n      <input\n        onChange={handleChange}\n        value={hex}\n        name=\"hex\"\n        id={id('hex')} />\n\n\n    </div>\n  )\n\n}\n","import React from 'react'\nimport { Part } from '../../types'\nimport PartInput from '../part-input'\nimport styles from './styles.module.css'\n\n\ntype Props = {\n  part: Part\n  children: React.ReactNode\n}\n\nexport default function PartPage({ part, children }: Props) {\n\n\n  return (\n    <div className={styles.page}>\n      <h1>{part.label}</h1>\n      <h2>{part.index} of {part.numParts}</h2>\n\n      {children}\n\n      <p>\n        If the QR code doesn't scan, you can type in the following:\n      </p>\n      <div>\n        <PartInput part={part}\n          onChange={() => { }}\n          index={part.index}\n        />\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport {\n  useLocation, useHistory, Link\n} from \"react-router-dom\";\nimport QRCode from 'qrcode.react'\nimport { Routes } from '../../constants'\nimport PartPage from '../part-page'\nimport { Secret } from '../../types'\nimport { split } from '../../wrapper'\nimport styles from './styles.module.css'\n\nexport function useSecretFromLocation(): Secret | null {\n  const location = useLocation()\n\n  return React.useMemo(() => {\n    if (!location.state) {\n      return null\n    }\n    const numParts = Number(location.state.numParts || 0)\n    const quorum = Number(location.state.quorum || 0)\n\n    if (!numParts || !quorum || quorum >= numParts) {\n      return null\n    }\n\n    return {\n      label: location.state.label || \"\",\n      text: location.state.text || \"\",\n      numParts,\n      quorum,\n    }\n  }, [location.state])\n}\n\n\nexport function useShamir(secret: Secret | null) {\n  return React.useMemo(() => {\n    if (secret == null) {\n      return\n    }\n    return split(secret)\n  }, [secret])\n}\n\nexport default function PrintSecret() {\n  const history = useHistory()\n  const secret = useSecretFromLocation()\n  const parts = useShamir(secret)\n\n\n  React.useEffect(() => {\n    if (\n      parts == null\n      || secret == null\n      || !secret.label\n      || !secret.text\n      || !secret.numParts\n      || !secret.quorum\n    ) {\n      history.push(Routes.Edit, secret)\n    }\n  }, [history, parts, secret])\n\n  if (parts == null) return null\n\n  return (\n    <React.Fragment>\n      <div className={styles.noPrint}>\n        <h1>Secret</h1>\n\n        <pre>{JSON.stringify(secret, null, 2)}</pre>\n        <Link to={{ pathname: Routes.Edit, state: secret }}>\n          Edit\n      </Link>\n\n      </div>\n      {parts.map((part) => {\n\n        const search = new URLSearchParams()\n        search.set('index', String(part.index))\n        search.set('hex', part.hex)\n        search.set('numParts', String(part.numParts))\n        search.set('quorum', String(part.quorum))\n        search.set('label', String(part.label))\n\n\n        // const label = query.get('label')\n\n        console.log('search', search.toString())\n\n        const destination: any = {\n          pathname: Routes.Assemble,\n          search: search.toString(),\n        }\n\n        const href = window.location.protocol + '//' + window.location.host\n          + history.createHref(destination)\n\n\n        return (\n          <PartPage part={part} key={part.index} >\n            <Link to={destination}>\n              <QRCode\n                renderAs=\"svg\"\n                size={512}\n                value={href}\n              />\n            </Link>\n          </PartPage>\n        )\n      }\n      )}\n\n    </React.Fragment>\n  )\n}\n","import React from 'react'\nimport { useHistory } from \"react-router-dom\";\nimport { Routes, MAX_PARTS, MIN_PARTS, DEFAULT_PARTS, DEFAULT_QUORUM } from '../../constants'\nimport { useSecretFromLocation } from '../print'\nimport { Secret } from '../../types'\nimport { useHtmlId } from '../../hooks'\n\n\nconst emptySecret: Secret = {\n  label: \"\",\n  text: \"\",\n  numParts: DEFAULT_PARTS,\n  quorum: DEFAULT_QUORUM,\n}\n\n\nexport default function NewSecret() {\n  const history = useHistory()\n  const id = useHtmlId()\n  const defaultState = useSecretFromLocation() || emptySecret\n\n  const [state, setState] = React.useState<Secret>(defaultState)\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const update = { [e.target.name]: e.target.value }\n    setState((state) => Object.assign({}, state, update))\n  }\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    history.push(Routes.Print, state)\n\n  }\n\n  const partsOptions: number[] = []\n  const quorumOptions: number[] = []\n  for (let i = 1; i <= MAX_PARTS; i++) {\n    if (i >= MIN_PARTS) {\n      partsOptions.push(i)\n    }\n    if (i <= state.numParts) {\n      quorumOptions.push(i)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2>NewSecret</h2>\n\n      <label htmlFor={id('label')}>\n        Label\n      </label>\n      <input\n        onChange={handleChange}\n        value={state.label}\n        name=\"label\"\n        id={id('label')} />\n\n      <br />\n\n      <label htmlFor={id('text')}>\n        Secret Text\n      </label>\n      <textarea\n        onChange={handleChange}\n        value={state.text}\n        name=\"text\"\n        id={id('text')} />\n\n      <br />\n\n      <label htmlFor={id('quorum')}>\n        quorum\n      </label>\n      <select name=\"quorum\" id={id('quorum')} value={state.quorum} onChange={handleChange}>\n        {quorumOptions.map((n) => (\n          <option key={n} value={n}>{n}</option>\n        ))}\n      </select>\n\n      <br />\n      <label htmlFor={id('numParts')}>\n        Parts\n      </label>\n      <select name=\"numParts\" id={id('numParts')} value={state.numParts} onChange={handleChange}>\n        {partsOptions.map((n) => (\n          <option key={n} value={n}>{n}</option>\n        ))}\n      </select>\n\n      <br />\n      <button type=\"submit\">\n        Done\n      </button>\n    </form>\n  )\n}\n","import React from 'react';\nimport QrReader from 'react-qr-reader'\nimport { useHistory } from 'react-router-dom'\nimport { Routes, MAX_PARTS, MIN_PARTS, DEFAULT_PARTS } from '../../constants'\nimport { useHtmlId, useQuery, useLocalStorage } from '../../hooks'\nimport { Part, MinimumPart } from '../../types'\nimport { join } from '../../wrapper'\nimport styles from './styles.module.css'\nimport PartInput from '../part-input'\n\ntype State = {\n  scanning: boolean,\n  secret: string | null,\n  numParts: number,\n  parts: Record<string, Part | MinimumPart>\n}\n\ntype ActionSetNumParts = {\n  type: 'setNumParts',\n  payload: number,\n}\n\ntype ActionsSetPart = {\n  type: 'setPart',\n  payload: MinimumPart | Part,\n}\n\ntype ActionsSetSecret = {\n  type: 'setSecret',\n  payload: string,\n}\n\ntype ActionStartScan = {\n  type: 'startScan',\n}\n\ntype Action =\n  | ActionStartScan\n  | ActionSetNumParts\n  | ActionsSetPart\n  | ActionsSetSecret\n\nconst unreachable = (_n: never) => { }\nfunction reducer(state: State, action: Action): State {\n\n  switch (action.type) {\n    case \"startScan\":\n      return {\n        ...state,\n        scanning: true,\n      }\n    case \"setNumParts\":\n      return {\n        ...state,\n        numParts: action.payload,\n        parts: {},\n      }\n    case \"setPart\": {\n      const part = action.payload\n      const numParts = 'numParts' in part ? part.numParts : state.numParts\n      let parts = state.parts\n      if (numParts !== state.numParts) {\n        parts = {}\n      }\n\n      return {\n        ...state,\n        parts: {\n          ...parts,\n          [part.index]: part\n        },\n        numParts,\n      }\n    }\n    case \"setSecret\":\n      return {\n        ...state,\n        secret: action.payload,\n      }\n    default:\n      unreachable(action)\n  }\n\n  return state\n}\n\nconst initialState: State = {\n  scanning: false,\n  secret: null,\n  numParts: DEFAULT_PARTS,\n  parts: {},\n}\n\nfunction usePartParameters(callback: (p: Part) => void) {\n  const query = useQuery()\n\n  const index = Number(query.get('index'))\n  const hex = query.get('hex')\n  const numParts = Number(query.get('numParts'))\n  const label = query.get('label')\n  const quorum = Number(query.get('quorum'))\n  React.useEffect(() => {\n\n    console.log({\n\n      index,\n      hex,\n      numParts,\n      label,\n      quorum,\n\n    })\n\n    if (\n      !isNaN(index)\n      && index > 0\n      && hex\n      && !isNaN(numParts)\n      && numParts > 0\n      && !isNaN(quorum)\n      && quorum > 0\n      && label != null\n    ) {\n      const part: Part = {\n        index,\n        hex,\n        label,\n        numParts,\n        quorum\n      }\n      console.log('query part', part)\n      callback(part)\n    }\n  }, [callback, hex, index, label, numParts, quorum])\n}\n\nexport default function AssembleSecret() {\n  const id = useHtmlId()\n  const history = useHistory()\n\n  // I couldn't figure out the types to extract this into its own hook\n  /* useStorageReducer(key, reducer, initialState) */\n  const [storage, setStorage] = useLocalStorage('state', initialState)\n  const [state, dispatch] = React.useReducer(reducer, storage)\n  React.useEffect(() => {\n    if (storage !== state) {\n      setStorage(state)\n    } else {\n    }\n  }, [setStorage, state, storage])\n\n\n  const paramCB = React.useCallback((part) => {\n    dispatch({\n      type: 'setPart',\n      payload: part,\n    })\n    history.replace(Routes.Assemble)\n  }, [history])\n  usePartParameters(paramCB)\n\n  const { secret, numParts, scanning, parts } = state\n  const handleChangeNumParts = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch({\n      type: 'setNumParts',\n      payload: Number(e.target.value)\n    })\n  }\n\n  const handleChangeHex = (index: number, hex: string) => {\n    const current = parts[index] ?? { index, hex: '' }\n    dispatch({\n      type: 'setPart',\n      payload: {\n        ...current,\n        hex\n      }\n    })\n  }\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n\n    try {\n      const secret = join(\n        Object.values(parts)\n      )\n      dispatch({\n        type: 'setSecret',\n        payload: secret,\n      })\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  const handleScanError = (err: any) => {\n    console.error(err)\n  }\n  const handleScan = (data: string | null) => {\n    console.log('scan', data)\n    if (data) {\n      const href = window.location.protocol + '//' + window.location.host\n        + history.createHref({ pathname: '/' })\n      if (data.indexOf(href) === 0) {\n        history.replace(data.replace(href, ''))\n      }\n    }\n  }\n\n  const partsOptions = new Array(MAX_PARTS - MIN_PARTS)\n    .fill(0)\n    .map((_n, index) => (\n      <option key={index} value={index + MIN_PARTS}>{index + MIN_PARTS}</option>\n    ))\n\n  const partInputs: JSX.Element[] = []\n  for (let i = 1; i <= numParts; i++) {\n    partInputs.push(\n      <PartInput key={i} index={i} part={parts[i]} onChange={handleChangeHex} />\n    )\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2>AssembleSecret</h2>\n\n      {scanning ? (\n        <QrReader\n          className={styles.reader}\n          delay={500}\n          onError={handleScanError}\n          onScan={handleScan}\n        />\n\n      ) : (\n          <button onClick={() => dispatch({ type: 'startScan' })}>Scan QR Codes</button>\n        )}\n\n      <br />\n      <label htmlFor={id('numParts')}>\n        Parts\n      </label>\n      <select name=\"numParts\" id={id('numParts')} value={numParts} onChange={handleChangeNumParts}>\n        {partsOptions}\n      </select>\n\n      {partInputs}\n\n      <button type=\"submit\">\n        Done\n      </button>\n\n      {secret && (\n        <div>\n          Secret: {secret}\n        </div>\n      )}\n\n    </form>\n  )\n}\n","import React from 'react'\nimport { Routes } from '../../constants'\nimport { Link } from 'react-router-dom'\nimport styles from './styles.module.css'\n\nconsole.log('nav', styles)\n\nexport default function Nav() {\n\n  return (\n    <nav className={styles.nav}>\n      <ul>\n        <li><Link to={Routes.Edit}>New Secret</Link></li>\n        <li><Link to={Routes.Assemble}>Assemble Secret</Link></li>\n      </ul>\n    </nav>\n  )\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport './serviceWorker';\n\nconst basename = '/shamir-secret-splitter'\n\nReactDOM.render(<Router basename={basename}><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n","import React from 'react';\nimport {\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport { Routes } from '../../constants'\nimport Edit from '../edit'\nimport Print from '../print'\nimport AssembleSecret from '../assemble'\nimport Nav from '../nav'\n\nexport default function App() {\n  return (\n    <React.Fragment>\n      <Nav />\n      <Switch>\n        <Route path={Routes.Print}>\n          <Print />\n        </Route>\n        <Route path={Routes.Assemble}>\n          <AssembleSecret />\n        </Route>\n        <Route path={Routes.Edit}>\n          <Edit />\n        </Route>\n      </Switch>\n    </React.Fragment>\n  );\n}\n","import * as shamir from 'shamir'\nimport { randomBytes } from 'crypto'\nimport { Secret, Part, MinimumPart } from './types'\n\nexport function split(secret: Secret): Part[] {\n  const utf8Encoder = new TextEncoder();\n  let secretBytes = utf8Encoder.encode(secret.text);\n\n  const uintParts = shamir.split(randomBytes, secret.numParts, secret.quorum, secretBytes);\n\n  return Object.entries(uintParts).map(([key, uint]): Part => {\n    return {\n      label: secret.label,\n      numParts: secret.numParts,\n      quorum: secret.quorum,\n      index: Number(key),\n      hex: Buffer.from(uint).toString('hex')\n    }\n  })\n}\n\nexport function join(parts: MinimumPart[]): Secret['text'] {\n  const uintParts = parts\n    .reduce((obj, p) => {\n      obj[p.index] = Uint8Array.from(Buffer.from(p.hex, 'hex'))\n      return obj\n    }, {} as Record<string, Uint8Array>)\n  const utf8Decoder = new TextDecoder();\n\n  const bytes = shamir.join(uintParts)\n\n  return utf8Decoder.decode(bytes)\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"styles_nav__2cd2r\"};"],"sourceRoot":""}