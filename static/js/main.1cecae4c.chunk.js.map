{"version":3,"sources":["components/part-page/styles.module.css","components/print/styles.module.css","components/edit/styles.module.css","components/nav/styles.module.css","constants.ts","components/part-input/index.tsx","hooks.ts","components/part-page/index.tsx","components/print/index.tsx","components/edit/index.tsx","components/assemble/index.tsx","components/nav/index.tsx","serviceWorker.ts","index.tsx","components/app/index.tsx","pgp-phrase.ts","wrapper.ts","components/assemble/styles.module.css"],"names":["module","exports","Routes","MAX_PARTS","MIN_PARTS","initialState","hex","text","error","reducer","state","wordsToHex","tmp","split","pop","join","word","PartInput","part","onChange","index","id","React","useMemo","Math","random","toString","substr","name","useHtmlId","useReducer","result","hexToWords","dispatch","TextField","e","value","target","newHex","multiline","helperText","label","PartPage","children","history","useHistory","href","window","location","protocol","host","createHref","pathname","Assemble","className","styles","page","numParts","useSecretFromLocation","useLocation","Number","quorum","PrintSecret","secret","parts","useShamir","useEffect","push","Edit","Fragment","noPrint","to","Button","variant","onClick","print","map","search","URLSearchParams","set","String","destination","key","renderAs","size","emptySecret","NewSecret","defaultState","useState","setState","handleChange","update","Object","assign","partsOptions","quorumOptions","i","onSubmit","preventDefault","Print","Paper","form","select","SelectProps","native","data-testid","n","type","color","notEmpty","item","unreachable","_n","action","payload","trim","queryToPart","query","get","isNaN","usePartParameters","callback","AssembleSecret","scanning","setScanning","setSecret","initialValue","localStorage","getItem","JSON","parse","console","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","useLocalStorage","storage","setStorage","useCallback","replace","handleChangeHex","current","handleSubmit","values","filter","done","every","p","length","Array","fill","MenuItem","partInputs","assemble","reader","delay","onError","err","onScan","data","URL","searchParams","Nav","tabValue","nav","Tabs","event","Tab","Boolean","hostname","match","ReactDOM","render","basename","Container","maxWidth","CssBaseline","path","document","getElementById","reverseWordslist","buffer","Buffer","from","toLowerCase","words","wordlist","input","even","odd","toUpperCase","secretBytes","TextEncoder","encode","uintParts","shamir","randomBytes","entries","uint","reduce","obj","Uint8Array","utf8Decoder","TextDecoder","bytes","decode"],"mappings":"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","file":"static/js/main.1cecae4c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"styles_page__2ydav\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"print\":\"styles_print__X66sV\",\"qr\":\"styles_qr__3rz3I\",\"noPrint\":\"styles_noPrint__2Y233\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"styles_form__2Hoej\",\"quorum\":\"styles_quorum__36Y8D\",\"parts\":\"styles_parts__3k7x6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"styles_nav__2cd2r\",\"printTab\":\"styles_printTab__1Y1BP\"};","\nexport const MAX_PARTS = 10\nexport const MIN_PARTS = 2\n\nexport const DEFAULT_PARTS = 4\nexport const DEFAULT_QUORUM = 3\n\n\nexport enum Routes {\n  Edit = '/',\n  Print = '/print',\n  Assemble = '/assemble',\n}\n","import React from 'react'\nimport { TextField } from '@material-ui/core';\nimport { Part, MinimumPart } from '../../types'\nimport { hexToWords, wordsToHex } from '../../pgp-phrase'\nimport { useHtmlId } from '../../hooks';\n\ntype Props = {\n  part?: MinimumPart | Part,\n  onChange?: (index: number, hex: string) => void,\n  index: number,\n}\n\ntype State = {\n  hex: string,\n  text: string,\n  error: null | string,\n}\n\nconst initialState: State = {\n  hex: '',\n  text: '',\n  error: null,\n}\n\n\nfunction reducer(state: State, text: string): State {\n  let hex = wordsToHex(text)\n  if (typeof hex !== 'string') {\n    const tmp = text.split(/\\s+/g)\n    tmp.pop()\n    hex = wordsToHex(tmp.join(' '))\n  }\n\n  if (typeof hex == 'string') {\n    return { hex, text, error: null, }\n  }\n\n  return {\n    ...state,\n    text,\n    error: `${hex.word} not recognized`\n  }\n}\n\nexport default function PartInput({ part, onChange, index }: Props) {\n  const id = useHtmlId()\n  const hex = part?.hex ?? \"\"\n  const [state, dispatch] = React.useReducer(reducer, initialState, (state) => {\n    const result = hexToWords(hex).join(' ')\n    if (typeof result === 'string') {\n      return {\n        ...state,\n        text: result\n      }\n    }\n    return state\n  })\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!onChange) { return }\n\n    const value = e.target.value\n    dispatch(value)\n    const newHex = wordsToHex(value)\n\n    if (typeof newHex === 'string' && newHex !== hex) {\n      onChange(index, newHex)\n    }\n  }\n\n  return (\n    <TextField\n      onChange={handleChange}\n      multiline\n      id={id(`part-${index}`)}\n      error={state.error != null}\n      helperText={state.error}\n      value={state.text}\n      name=\"label\"\n      label={`Part ${index}`} />\n  )\n\n}\n","import React from 'react'\nimport { useLocation } from 'react-router-dom'\n\nexport function useHtmlId() {\n  const id = React.useMemo(() => Math.random().toString(16).substr(2), [])\n\n  return (name: string) => name + '-' + id\n}\n\n\nexport function useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\n\n\n// Based on the hook at https://usehooks.com/useLocalStorage/\nexport function useLocalStorage<T>(key: string, initialValue: T): [T, React.Dispatch<React.SetStateAction<T>>] {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = React.useState<T>(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.error(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue: React.Dispatch<React.SetStateAction<T>> = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.error(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","import React from 'react'\nimport { Part } from '../../types'\nimport PartInput from '../part-input'\nimport styles from './styles.module.css'\nimport { useHistory } from 'react-router-dom'\nimport { Routes } from '../../constants'\n\n\ntype Props = {\n  part: Part\n  children: React.ReactNode\n}\n\nexport default function PartPage({ part, children }: Props) {\n  const history = useHistory()\n\n  const href = window.location.protocol + '//' + window.location.host\n    + history.createHref({ pathname: Routes.Assemble })\n  return (\n    <div className={styles.page}>\n      <h1>{part.label}</h1>\n      <h2>{part.index} of {part.numParts}</h2>\n\n      {children}\n\n      <strong>{href}</strong>\n      <p>\n        If the QR code doesn't scan, you can go to the URL above and type in the\n        following into the textbox for <strong>Part {part.index}</strong>:\n      </p>\n      <PartInput part={part} index={part.index}\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport {\n  useLocation, useHistory, Link\n} from \"react-router-dom\";\nimport QRCode from 'qrcode.react'\nimport { Routes } from '../../constants'\nimport PartPage from '../part-page'\nimport { Secret } from '../../types'\nimport { split } from '../../wrapper'\nimport styles from './styles.module.css'\nimport { Button } from '@material-ui/core';\n\nexport function useSecretFromLocation(): Secret | null {\n  const location = useLocation()\n\n  return React.useMemo(() => {\n    if (!location.state) {\n      return null\n    }\n    const numParts = Number(location.state.numParts || 0)\n    const quorum = Number(location.state.quorum || 0)\n\n    if (!numParts || !quorum || quorum >= numParts) {\n      return null\n    }\n\n    return {\n      label: location.state.label || \"\",\n      text: location.state.text || \"\",\n      numParts,\n      quorum,\n    }\n  }, [location.state])\n}\n\n\nexport function useShamir(secret: Secret | null) {\n  return React.useMemo(() => {\n    if (secret == null) {\n      return\n    }\n    return split(secret)\n  }, [secret])\n}\n\nexport default function PrintSecret() {\n  const history = useHistory()\n  const secret = useSecretFromLocation()\n  const parts = useShamir(secret)\n\n\n  React.useEffect(() => {\n    if (\n      parts == null\n      || secret == null\n      || !secret.label\n      || !secret.text\n      || !secret.numParts\n      || !secret.quorum\n    ) {\n      history.push(Routes.Edit, secret)\n    }\n  }, [history, parts, secret])\n\n  if (parts == null || secret == null) return null\n\n  return (\n    <React.Fragment>\n      <div className={styles.noPrint}>\n\n        <p>\n          Thew following pages contain your secret.\n          Print them and distribute them to different locations.\n          From the Assemble Secret page, if you scan any {secret.quorum}\n          of these codes, it will display your secret.\n        </p>\n\n        <Link to={{ pathname: Routes.Edit, state: secret }}>\n          <Button variant=\"outlined\">\n            Edit\n          </Button>\n        </Link>\n\n        <Button onClick={() => window.print()} variant=\"outlined\">\n          Print\n        </Button>\n      </div>\n      {parts.map((part) => {\n\n        const search = new URLSearchParams()\n        search.set('index', String(part.index))\n        search.set('hex', part.hex)\n        search.set('numParts', String(part.numParts))\n        search.set('quorum', String(part.quorum))\n        search.set('label', String(part.label))\n\n        const destination: any = {\n          pathname: Routes.Assemble,\n          search: search.toString(),\n        }\n\n        const href = window.location.protocol + '//' + window.location.host\n          + history.createHref(destination)\n\n\n        return (\n          <PartPage part={part} key={part.index} >\n            <Link to={destination}>\n              <QRCode\n                renderAs=\"svg\"\n                size={512}\n                value={href}\n              />\n            </Link>\n          </PartPage>\n        )\n      }\n      )}\n\n    </React.Fragment>\n  )\n}\n","import React from 'react'\nimport { Paper, TextField, MenuItem, Button } from '@material-ui/core';\nimport { useHistory } from \"react-router-dom\";\nimport { Routes, MAX_PARTS, MIN_PARTS, DEFAULT_PARTS, DEFAULT_QUORUM } from '../../constants'\nimport { useSecretFromLocation } from '../print'\nimport { Secret } from '../../types'\nimport styles from './styles.module.css'\n\nconst emptySecret: Secret = {\n  label: \"\",\n  text: \"\",\n  numParts: DEFAULT_PARTS,\n  quorum: DEFAULT_QUORUM,\n}\n\n\nexport default function NewSecret() {\n  const history = useHistory()\n  const defaultState = useSecretFromLocation() || emptySecret\n\n  const [state, setState] = React.useState<Secret>(defaultState)\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const update = { [e.target.name]: e.target.value }\n    setState((state) => Object.assign({}, state, update))\n  }\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    history.push(Routes.Print, state)\n\n  }\n\n  const partsOptions: number[] = []\n  const quorumOptions: number[] = []\n  for (let i = 1; i <= MAX_PARTS; i++) {\n    if (i >= MIN_PARTS) {\n      partsOptions.push(i)\n    }\n    if (i < state.numParts) {\n      quorumOptions.push(i)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit} >\n      <Paper className={styles.form}>\n        <TextField\n          onChange={handleChange}\n          value={state.label}\n          id=\"label\"\n          name=\"label\"\n          label=\"Label\" />\n\n        <TextField\n          multiline={true}\n          label=\"Secret Text\"\n          id=\"secret-text\"\n          onChange={handleChange}\n          value={state.text}\n          name=\"text\" />\n\n\n        <TextField\n          name=\"quorum\"\n          select\n          SelectProps={{\n            native: true\n          }}\n          id=\"quorum\"\n          data-testid=\"quorum\"\n          label=\"quorum\"\n          value={state.quorum}\n          onChange={handleChange}\n        >\n          {quorumOptions.map((n) => (\n            <option key={n} value={n}>{n}</option>\n          ))}\n        </TextField>\n\n        <TextField\n          name=\"numParts\"\n          select\n          label=\"Parts\"\n          id=\"parts\"\n          SelectProps={{\n            native: true\n          }}\n          data-testid=\"parts\"\n          value={state.numParts}\n          onChange={handleChange}\n        >\n          {partsOptions.map((n) => (\n            <option key={n} value={n}>{n}</option>\n          ))}\n        </TextField>\n\n        <Button type=\"submit\" color=\"primary\" variant=\"outlined\">\n          Done\n        </Button>\n      </Paper>\n    </form>\n  )\n}\n","import React from 'react';\nimport QrReader from 'react-qr-reader'\nimport { useHistory } from 'react-router-dom'\nimport { Paper, TextField, MenuItem, Button } from '@material-ui/core';\nimport { Routes, MAX_PARTS, MIN_PARTS, DEFAULT_PARTS } from '../../constants'\nimport { useQuery, useLocalStorage } from '../../hooks'\nimport { Part, MinimumPart } from '../../types'\nimport { join } from '../../wrapper'\nimport styles from './styles.module.css'\nimport PartInput from '../part-input'\n\nfunction notEmpty<T>(item: T | null | undefined): item is T {\n  return item != null\n}\n\ntype State = {\n  numParts: number,\n  parts: Record<string, Part | MinimumPart>\n}\n\ntype ActionSetNumParts = {\n  type: 'setNumParts',\n  payload: number,\n}\n\ntype ActionsSetPart = {\n  type: 'setPart',\n  payload: MinimumPart | Part,\n}\n\ntype Action =\n  | ActionSetNumParts\n  | ActionsSetPart\n\nconst unreachable = (_n: never) => { }\nfunction reducer(state: State, action: Action): State {\n\n  switch (action.type) {\n    case \"setNumParts\":\n      return {\n        ...state,\n        numParts: action.payload,\n        parts: {},\n      }\n    case \"setPart\": {\n      let part = action.payload\n      const numParts = 'numParts' in part ? part.numParts : state.numParts\n      let parts = state.parts\n      if (numParts !== state.numParts) {\n        parts = {}\n      }\n\n      if (part.hex.trim() === '') {\n        // Clone parts so I don't mutate the original object\n        parts = { ...parts }\n        delete parts[part.index]\n        return {\n          ...state,\n          parts,\n          numParts,\n        }\n      }\n\n      return {\n        ...state,\n        parts: {\n          ...parts,\n          [part.index]: part\n        },\n        numParts,\n      }\n    }\n    default:\n      unreachable(action)\n  }\n\n  return state\n}\n\nconst initialState: State = {\n  numParts: DEFAULT_PARTS,\n  parts: {},\n}\n\nfunction queryToPart(query: URLSearchParams): Part | null {\n  const index = Number(query.get('index'))\n  const hex = query.get('hex')\n  const numParts = Number(query.get('numParts'))\n  const label = query.get('label')\n  const quorum = Number(query.get('quorum'))\n  if (\n    !isNaN(index)\n    && index > 0\n    && hex\n    && !isNaN(numParts)\n    && numParts > 0\n    && !isNaN(quorum)\n    && quorum > 0\n    && label != null\n  ) {\n    const part: Part = {\n      index,\n      hex,\n      label,\n      numParts,\n      quorum\n    }\n    return part\n  }\n  return null\n}\n\nfunction usePartParameters(callback: (p: Part) => void) {\n  const query = useQuery()\n  const part = queryToPart(query)\n  React.useEffect(() => {\n    if (part != null) {\n      callback(part)\n    }\n  }, [callback, part])\n}\n\nexport default function AssembleSecret() {\n  const history = useHistory()\n  const [scanning, setScanning] = React.useState(false)\n  const [secret, setSecret] = React.useState<null | string>(null)\n\n  // I couldn't figure out the types to extract this into its own hook\n  /* useStorageReducer(key, reducer, initialState) */\n  const [storage, setStorage] = useLocalStorage('state', initialState)\n  const [state, dispatch] = React.useReducer(reducer, storage)\n  React.useEffect(() => {\n    if (storage !== state) {\n      setStorage(state)\n    } else {\n    }\n  }, [setStorage, state, storage])\n\n\n  const paramCB = React.useCallback((part) => {\n    dispatch({\n      type: 'setPart',\n      payload: part,\n    })\n    history.replace(Routes.Assemble)\n  }, [history])\n  usePartParameters(paramCB)\n\n  const { numParts, parts } = state\n  const handleChangeNumParts = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    dispatch({\n      type: 'setNumParts',\n      payload: Number(e.target.value)\n    })\n  }\n\n  const handleChangeHex = (index: number, hex: string) => {\n    const current = parts[index] ?? { index, hex: '' }\n    dispatch({\n      type: 'setPart',\n      payload: {\n        ...current,\n        hex\n      }\n    })\n  }\n\n  const handleSubmit = React.useCallback((e?: React.FormEvent<HTMLFormElement>) => {\n    if (e) {\n      e.preventDefault()\n    }\n\n    try {\n      const secret = join(\n        Object.values(parts)\n      )\n      setSecret(secret)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [parts])\n\n  React.useEffect(() => {\n    const parts = Object.values(state.parts)\n      .filter(notEmpty)\n\n\n    const done = parts.every(p => (\n      'label' in p\n      && 'label' in parts[0]\n      && p.label === parts[0].label\n      && p.numParts === parts[0].numParts\n      && p.quorum === parts[0].quorum\n\n    ))\n\n    if (\n      parts[0]\n      && 'quorum' in parts[0]\n      && parts.length === parts[0].quorum\n      && done\n    ) {\n      handleSubmit()\n    }\n\n  }, [handleSubmit, state.parts])\n\n  const handleScanError = (err: any) => {\n    console.error(err)\n  }\n  const handleScan = (data: string | null) => {\n    if (data) {\n      try {\n        const url = new URL(data)\n        const part = queryToPart(url.searchParams)\n\n        if (part != null) {\n          dispatch({\n            type: 'setPart',\n            payload: part\n          })\n        }\n      } catch (e) {\n      }\n    }\n  }\n\n  const partsOptions = new Array(MAX_PARTS - MIN_PARTS)\n    .fill(0)\n    .map((_n, index) => (\n      <MenuItem key={index} value={index + MIN_PARTS}>{index + MIN_PARTS}</MenuItem>\n    ))\n\n  const partInputs: JSX.Element[] = []\n  for (let i = 1; i <= numParts; i++) {\n    partInputs.push(\n      <PartInput key={`${i}/${numParts}`} index={i} part={parts[i]} onChange={handleChangeHex} />\n    )\n  }\n  if (secret) {\n\n    return (\n      <Paper className={styles.assemble}>\n        {secret}\n      </Paper>\n    )\n\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Paper className={styles.assemble}>\n        {scanning ? (\n          <React.Fragment>\n            <QrReader\n              className={styles.reader}\n              delay={500}\n              onError={handleScanError}\n              onScan={handleScan}\n            />\n            <Button variant=\"outlined\" onClick={() => setScanning(false)}>Stop Scanning</Button>\n          </React.Fragment>\n        ) : (\n            <Button variant=\"outlined\" onClick={() => setScanning(true)}>Scan QR Codes</Button>\n          )}\n\n        <br />\n\n        <TextField\n          name=\"numParts\"\n          select\n          label=\"Parts\"\n          value={numParts}\n          onChange={handleChangeNumParts}\n        >\n          {partsOptions}\n        </TextField>\n\n        {partInputs}\n\n        <Button type=\"submit\" color=\"primary\" variant=\"outlined\">\n          Done\n        </Button>\n      </Paper>\n    </form>\n  )\n}\n","import React from 'react'\nimport { Tabs, Tab } from '@material-ui/core'\nimport { Routes } from '../../constants'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport styles from './styles.module.css'\n\nexport default function Nav() {\n  const location = useLocation()\n  const history = useHistory()\n\n  const handleChange = (event: any, pathname: string) => {\n    history.push(pathname)\n  }\n  let tabValue = Routes.Edit\n  switch (location.pathname) {\n    case Routes.Assemble:\n      tabValue = Routes.Assemble\n      break;\n    case Routes.Edit:\n    case Routes.Print:\n    default:\n      tabValue = Routes.Edit\n  }\n\n\n  return (\n    <nav className={styles.nav}>\n      <Tabs value={tabValue} onChange={handleChange} >\n        <Tab value={Routes.Edit} label=\"New Secret\" />\n        <Tab value={Routes.Assemble} label=\"Assemble Secret\" />\n      </Tabs>\n    </nav >\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport './serviceWorker';\n\nconst basename = '/shamir-secret-splitter'\n\nReactDOM.render(<Router basename={basename}><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n","import React from 'react';\nimport {\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport { CssBaseline, Container } from '@material-ui/core';\nimport { Routes } from '../../constants'\nimport Edit from '../edit'\nimport Print from '../print'\nimport AssembleSecret from '../assemble'\nimport Nav from '../nav'\n\nexport default function App() {\n  return (\n    <Container maxWidth=\"sm\">\n      <CssBaseline />\n      <Nav />\n      <Switch>\n        <Route path={Routes.Print}>\n          <Print />\n        </Route>\n        <Route path={Routes.Assemble}>\n          <AssembleSecret />\n        </Route>\n        <Route path={Routes.Edit}>\n          <Edit />\n        </Route>\n      </Switch>\n    </Container>\n  );\n}\n","import wordlist from 'pgp-word-list/pgp.json'\n\nexport function hexToWords(hex: string): string[] {\n  const buffer = Buffer.from(hex.toLowerCase().replace(/[^0-9a-f]+/g, ''), 'hex')\n\n  const words: string[] = []\n  for (let i = 0; i < buffer.length; i++) {\n    const value = buffer[i]\n    words.push(\n      wordlist[value][i % 2]\n    )\n  }\n\n  return words\n}\n\n\ntype ReverseWordList = [\n  Record<string, number>,\n  Record<string, number>,\n]\n\nlet reverseWordslist: ReverseWordList\n\n\ntype ErrorResult = { type: 'INVALID_WORD', word: string }\nexport function wordsToHex(input: string): string | ErrorResult {\n  if (reverseWordslist == null) {\n    reverseWordslist = [{}, {}]\n    for (let i = 0; i < wordlist.length; i++) {\n      const [even, odd] = wordlist[i]\n\n      reverseWordslist[0][even.toLowerCase()] = i\n      reverseWordslist[1][odd.toLowerCase()] = i\n    }\n  }\n\n  const words = input.trim().toLowerCase().split(/\\s+/g)\n  if (input.trim().length === 0) {\n    return ''\n  }\n\n  const values = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n\n    const tmp = reverseWordslist[i % 2][word]\n    if (tmp == null) {\n      return { type: 'INVALID_WORD', word }\n    }\n    values.push(tmp)\n  }\n\n  return Buffer.from(values).toString('hex').toUpperCase()\n}\n","import * as shamir from 'shamir'\nimport { randomBytes } from 'crypto'\nimport { Secret, Part, MinimumPart } from './types'\n\nexport function split(secret: Secret): Part[] {\n  const utf8Encoder = new TextEncoder();\n  let secretBytes = utf8Encoder.encode(secret.text);\n\n  const uintParts = shamir.split(randomBytes, secret.numParts, secret.quorum, secretBytes);\n\n  return Object.entries(uintParts).map(([key, uint]): Part => {\n    return {\n      label: secret.label,\n      numParts: secret.numParts,\n      quorum: secret.quorum,\n      index: Number(key),\n      hex: Buffer.from(uint).toString('hex')\n    }\n  })\n}\n\nexport function join(parts: MinimumPart[]): Secret['text'] {\n  const uintParts = parts\n    .reduce((obj, p) => {\n      obj[p.index] = Uint8Array.from(Buffer.from(p.hex, 'hex'))\n      return obj\n    }, {} as Record<string, Uint8Array>)\n  const utf8Decoder = new TextDecoder();\n\n  const bytes = shamir.join(uintParts)\n\n  return utf8Decoder.decode(bytes)\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"assemble\":\"styles_assemble__1ky0g\"};"],"sourceRoot":""}